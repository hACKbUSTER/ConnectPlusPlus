// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/wrappers.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(LCIM_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define LCIM_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if LCIM_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/LCIMProtocolBuffers.h>
#else
 #import "LCIMProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_GEN_VERSION != 30001
#error This file was generated by a different version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - LCIMWrappersRoot

/// Exposes the extension registry for this file.
///
/// The base class provides:
/// @code
///   + (LCIMExtensionRegistry *)extensionRegistry;
/// @endcode
/// which is a @c LCIMExtensionRegistry that includes all the extensions defined by
/// this file and all files that it depends on.
@interface LCIMWrappersRoot : LCIMRootObject
@end

#pragma mark - LCIMDoubleValue

typedef GPB_ENUM(LCIMDoubleValue_FieldNumber) {
  LCIMDoubleValue_FieldNumber_Value = 1,
};

/// Wrapper message for `double`.
///
/// The JSON representation for `DoubleValue` is JSON number.
@interface LCIMDoubleValue : LCIMMessage

/// The double value.
@property(nonatomic, readwrite) double value;

@end

#pragma mark - LCIMFloatValue

typedef GPB_ENUM(LCIMFloatValue_FieldNumber) {
  LCIMFloatValue_FieldNumber_Value = 1,
};

/// Wrapper message for `float`.
///
/// The JSON representation for `FloatValue` is JSON number.
@interface LCIMFloatValue : LCIMMessage

/// The float value.
@property(nonatomic, readwrite) float value;

@end

#pragma mark - GPBInt64Value

typedef GPB_ENUM(GPBInt64Value_FieldNumber) {
  GPBInt64Value_FieldNumber_Value = 1,
};

/// Wrapper message for `int64`.
///
/// The JSON representation for `Int64Value` is JSON string.
@interface LCIMInt64Value : LCIMMessage

/// The int64 value.
@property(nonatomic, readwrite) int64_t value;

@end

#pragma mark - GPBUInt64Value

typedef GPB_ENUM(GPBUInt64Value_FieldNumber) {
  GPBUInt64Value_FieldNumber_Value = 1,
};

/// Wrapper message for `uint64`.
///
/// The JSON representation for `UInt64Value` is JSON string.
@interface LCIMUInt64Value : LCIMMessage

/// The uint64 value.
@property(nonatomic, readwrite) uint64_t value;

@end

#pragma mark - GPBInt32Value

typedef GPB_ENUM(GPBInt32Value_FieldNumber) {
  GPBInt32Value_FieldNumber_Value = 1,
};

/// Wrapper message for `int32`.
///
/// The JSON representation for `Int32Value` is JSON number.
@interface LCIMInt32Value : LCIMMessage

/// The int32 value.
@property(nonatomic, readwrite) int32_t value;

@end

#pragma mark - GPBUInt32Value

typedef GPB_ENUM(GPBUInt32Value_FieldNumber) {
  GPBUInt32Value_FieldNumber_Value = 1,
};

/// Wrapper message for `uint32`.
///
/// The JSON representation for `UInt32Value` is JSON number.
@interface LCIMUInt32Value : LCIMMessage

/// The uint32 value.
@property(nonatomic, readwrite) uint32_t value;

@end

#pragma mark - GPBBoolValue

typedef GPB_ENUM(GPBBoolValue_FieldNumber) {
  GPBBoolValue_FieldNumber_Value = 1,
};

/// Wrapper message for `bool`.
///
/// The JSON representation for `BoolValue` is JSON `true` and `false`.
@interface LCIMBoolValue : LCIMMessage

/// The bool value.
@property(nonatomic, readwrite) BOOL value;

@end

#pragma mark - GPBStringValue

typedef GPB_ENUM(GPBStringValue_FieldNumber) {
  GPBStringValue_FieldNumber_Value = 1,
};

/// Wrapper message for `string`.
///
/// The JSON representation for `StringValue` is JSON string.
@interface LCIMStringValue : LCIMMessage

/// The string value.
@property(nonatomic, readwrite, copy, null_resettable) NSString *value;

@end

#pragma mark - GPBBytesValue

typedef GPB_ENUM(GPBBytesValue_FieldNumber) {
  GPBBytesValue_FieldNumber_Value = 1,
};

/// Wrapper message for `bytes`.
///
/// The JSON representation for `BytesValue` is JSON string.
@interface LCIMBytesValue : LCIMMessage

/// The bytes value.
@property(nonatomic, readwrite, copy, null_resettable) NSData *value;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
